diff --git a/include/core/curl_stack.h b/include/core/curl_stack.h
index 9524454..b74d033 100644
--- a/include/core/curl_stack.h
+++ b/include/core/curl_stack.h
@@ -7,6 +7,7 @@
 #include <deque>
 #include <string>
 
+#include <torrent/utils/log.h>
 #include <torrent/utils/priority_queue_default.h>
 
 namespace core {
@@ -26,6 +27,8 @@ class CurlStack : std::deque<CurlGet*> {
 public:
   friend class CurlGet;
 
+  using DisableSslVerifyList = std::vector<std::string>;
+
   using base_type = std::deque<CurlGet*>;
 
   using base_type::const_iterator;
@@ -108,6 +111,40 @@ public:
     m_ssl_verify_peer = s;
   }
 
+  DisableSslVerifyList& ssl_verify_host_disabled_list() {
+    return m_ssl_verify_disabled_hosts;
+  }
+  DisableSslVerifyList& ssl_verify_peer_disabled_list() {
+    return m_ssl_verify_disabled_peers;
+  }
+
+  void set_ssl_verify_host_disabled_list(
+    const DisableSslVerifyList& hosts_list) {
+    m_ssl_verify_disabled_hosts = hosts_list;
+  }
+  void set_ssl_verify_peer_disabled_list(
+    const DisableSslVerifyList& peers_list) {
+    m_ssl_verify_disabled_peers = peers_list;
+  }
+
+  bool is_url_ssl_verify_disabled(const std::string& s, bool hosts) {
+    DisableSslVerifyList& disabled_list =
+      (hosts) ? m_ssl_verify_disabled_hosts : m_ssl_verify_disabled_peers;
+
+    if (disabled_list.empty())
+      return false;
+
+    for (const auto& url : disabled_list) {
+      if (s.find(url) != std::string::npos) {
+        lt_log_print(
+          torrent::LOG_DEBUG, "disabling ssl_verify for '%s'", url.c_str());
+        return true;
+      }
+    }
+
+    return false;
+  }
+
   long dns_timeout() const {
     return m_dns_timeout;
   }
@@ -146,6 +183,9 @@ private:
   std::string m_httpCaPath;
   std::string m_httpCaCert;
 
+  DisableSslVerifyList m_ssl_verify_disabled_hosts;
+  DisableSslVerifyList m_ssl_verify_disabled_peers;
+
   bool m_ssl_verify_host{ true };
   bool m_ssl_verify_peer{ true };
   long m_dns_timeout{ 60 };
diff --git a/src/command_network.cc b/src/command_network.cc
index 7e1c0b3..70a9786 100644
--- a/src/command_network.cc
+++ b/src/command_network.cc
@@ -233,6 +233,31 @@ apply_scgi(const std::string& arg, int type) {
   return torrent::Object();
 }
 
+torrent::Object
+ssl_verify_disable(const torrent::Object::list_type& args, bool hosts) {
+  if (args.size() == 0)
+    return torrent::Object();
+
+  std::vector<std::string> ssl_verify_disable_list;
+
+  for (torrent::Object::list_const_iterator itr  = args.begin(),
+                                            last = args.end();
+       itr != last;
+       itr++) {
+    if (itr->is_string())
+      ssl_verify_disable_list.push_back(itr->as_string().c_str());
+  }
+
+  if (hosts)
+    control->core()->http_stack()->set_ssl_verify_host_disabled_list(
+      ssl_verify_disable_list);
+  else
+    control->core()->http_stack()->set_ssl_verify_peer_disabled_list(
+      ssl_verify_disable_list);
+
+  return torrent::Object();
+}
+
 void
 initialize_command_network() {
   torrent::ConnectionManager* cm          = torrent::connection_manager();
@@ -312,6 +337,10 @@ initialize_command_network() {
                    std::bind(&core::CurlStack::set_ssl_verify_peer,
                              httpStack,
                              std::placeholders::_2));
+  CMD2_ANY_LIST("network.http.ssl_verify_host.disable_list.set",
+                std::bind(&ssl_verify_disable, std::placeholders::_2, true));
+  CMD2_ANY_LIST("network.http.ssl_verify_peer.disable_list.set",
+                std::bind(&ssl_verify_disable, std::placeholders::_2, false));
 
   CMD2_ANY("network.send_buffer.size",
            std::bind(&torrent::ConnectionManager::send_buffer_size, cm));
diff --git a/src/core/curl_get.cc b/src/core/curl_get.cc
index df832ad..87d2354 100644
--- a/src/core/curl_get.cc
+++ b/src/core/curl_get.cc
@@ -69,6 +69,17 @@ CurlGet::start() {
 
   curl_easy_setopt(m_handle, CURLOPT_ENCODING, "");
 
+  curl_easy_setopt(m_handle,
+                   CURLOPT_SSL_VERIFYHOST,
+                   (long)(m_stack->ssl_verify_host() ? 2 : 0));
+  if (m_stack->is_url_ssl_verify_disabled(m_url, true))
+    curl_easy_setopt(m_handle, CURLOPT_SSL_VERIFYHOST, (long)0);
+  curl_easy_setopt(m_handle,
+                   CURLOPT_SSL_VERIFYPEER,
+                   (long)(m_stack->ssl_verify_peer() ? 1 : 0));
+  if (m_stack->is_url_ssl_verify_disabled(m_url, false))
+    curl_easy_setopt(m_handle, CURLOPT_SSL_VERIFYPEER, (long)0);
+
   m_ipv6 = false;
 
   m_stack->add_get(this);
diff --git a/src/core/curl_stack.cc b/src/core/curl_stack.cc
index d75b6fc..af665ef 100644
--- a/src/core/curl_stack.cc
+++ b/src/core/curl_stack.cc
@@ -162,10 +162,6 @@ CurlStack::add_get(CurlGet* get) {
   if (!m_httpCaCert.empty())
     curl_easy_setopt(get->handle(), CURLOPT_CAINFO, m_httpCaCert.c_str());
 
-  curl_easy_setopt(
-    get->handle(), CURLOPT_SSL_VERIFYHOST, (long)(m_ssl_verify_host ? 2 : 0));
-  curl_easy_setopt(
-    get->handle(), CURLOPT_SSL_VERIFYPEER, (long)(m_ssl_verify_peer ? 1 : 0));
   curl_easy_setopt(get->handle(), CURLOPT_DNS_CACHE_TIMEOUT, m_dns_timeout);
 
   base_type::push_back(get);
