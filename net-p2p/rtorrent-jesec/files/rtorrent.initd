#!/sbin/openrc-run
# Copyright 1999-2024 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

_RC_SVCNAME="${RC_SVCNAME%.*}"
__IFS=$'\n'

: "${RT_USER:=''}"

: "${RT_RC:='.rtorrent.rc'}"
RT_BINARY="rtorrent"
: "${RT_BINARY_PATH:=}"
: "${RT_SESSION_DIR:='.session'}"

: "${TMUX_TMPDIR:='/tmp'}"
: "${TMUX_SOCKET:='default'}"
__IFS="
"

if ! [[ $(id "${RT_USER}" 2> /dev/null) ]] && [[ "${RC_SVCNAME}" == "${_RC_SVCNAME}."* ]]; then
	eerror "ERROR: Ensure service is configured correctly"
	exit 1
else
	RT_NAME="${RC_SVCNAME#*.}"

	PWHOME=$(getent passwd "${RT_USER}" | awk -F: '{ print $6 }')
	RT_RC="${PWHOME}/${RT_RC}"
	RT_SESSION_PATH="${PWHOME}/${SESSION_DIR}"

	TMUX_SOCKET_PATH="${TMUX_TMPDIR}/tmux-$(id -u "${RT_USER}" 2> /dev/null)/${TMUX_SOCKET}"
	RT_PID="/run/${_RC_SVCNAME}/${RT_NAME}.pid"
fi

depend() {
	use net
}

start() {
	if [[ ! -f "${RT_RC}" ]]; then
		eerror "ERROR: ${RT_RC} not found."
		exit 1
	fi

	if [[ -f "${RT_SESSION_PATH}/rtorrent.lock" ]]; then
		eerror "ERROR: ${RT_SESSION_PATH}/rtorrent.lock exists"
		exit 1
	fi

	if [[ -z "${RT_BINARY_PATH}" ]]; then
		RT_BINARY_PATH=$(command -v "${RT_BINARY}")
	else
		if [[ -f "${RT_BINARY_PATH}" ]]; then
			RT_BINARY=$(basename "${RT_BINARY_PATH}")
		else
			eerror "ERROR: ${RT_BINARY_PATH} file not found"
			exit 1
		fi
	fi

	ebegin "Starting ${RT_USER}'s ${RT_BINARY} instance: '${RT_NAME}'"

	env TERM="xterm-256color" \
		start-stop-daemon \
			--start \
			--make-pidfile \
			--pidfile "${RT_PID}" \
			--background \
			--user "${RT_USER}" \
			--env HOME="${PWHOME:-/home/${RT_USER}}" \
			--env TMUX_TMPDIR="${TMUX_TMPDIR}" \
			--name "${RT_BINARY}" \
			--exec tmux -- -L "${TMUX_SOCKET}" new-session -c "${PWHOME}" -d -n "${RT_BINARY}" -s "${RC_SVCNAME}" "${RT_BINARY_PATH} -n -o import=${RT_RC} ${RT_OPTS}"

	# set the pid
	sleep 2
	rt_pids=$(tmux -S "${TMUX_SOCKET_PATH}" list-panes -a -F "#{pane_pid}")
	readarray -t array <<< "${rt_pids}"
	declare -p array > /dev/null
	for pid in "${array[@]}"; do
	 	if [[ $(ps -p "${pid}" -o comm=) == "${RT_BINARY}"* ]]; then
			echo "${pid}" > "${RT_PID}"
		fi
	done

	einfo "${RT_NAME} instance started"

	eend $?
}

stop() {
	ebegin "Stopping ${RT_USER}'s ${RT_BINARY} instance: '${RT_NAME}'"
	if [[ $(tmux -S "${TMUX_SOCKET_PATH}" list-panes -a | grep -c "${RC_SVCNAME}") -gt 1 ]]; then
		ewarn "WARNING: more than one pane found in tmux session '${RC_SVCNAME}'"
		while true; do
			read -rp "Do you want to stop all processes? " yn
			case "${yn}" in
				[Yy]* ) break;;
				[Nn]* ) exit 1;;
				* ) echo "Please answer yes or no.";;
			esac
		done
	fi
	tmux_safe_kill_panes "${RC_SVCNAME}"
	SKIP_RT=1
	tmux_safe_kill_panes "${RC_SVCNAME}"

	s=0
	while ps -p "$(cat "${RT_PID}")" -o comm= > /dev/null; do 
		echo -ne "Stopping rtorrent... $s"\\r
		(( s=s+1 ))
		sleep 1
	done

	# cleanup
	rm -f "${RT_PID}"

	eend $?
}

function safe_end_procs {
	OIFS="${IFS}"
	local IFS=${__IFS}

	for pane_set in $1; do
		pane_id=$(echo "${pane_set}" | awk -F " " '{print $1}')
		pane_proc=$(echo "${pane_set}" | awk -F " " '{print tolower($2)}')
		cmd="C-c"
		if [[ "${pane_proc}" == "vi" ]] || [[ "${pane_proc}" == "vim" ]] || [[ "${pane_proc}" == "nvim" ]]; then
			cmd=$(echo 'Escape ":qa!" Enter' || echo 'Escape ":qa" Enter')
		elif [[ "${pane_proc}" == "man" ]] || [[ "${pane_proc}" == "less" ]]; then
			cmd='"q"'
		elif [[ "${pane_proc}" == "bash" ]] || [[ "${pane_proc}" == "zsh" ]] || [[ "${pane_proc}" == "fish" ]]; then
			cmd='C-c C-u space "exit" Enter'
		elif [[ "${pane_proc}" == "ssh" ]] || [[ "${pane_proc}" == "vagrant" ]]; then
			cmd='Enter "~."'
		elif [[ "${pane_proc}" == "psql" ]] || [[ "${pane_proc}" == "mysql" ]]; then
			cmd='Enter "\q"'
		elif [[ "${pane_proc}" == "${RT_BINARY}" ]]; then
			if ! [[ "${SKIP_RT}" == 1 ]]; then
				cmd='C-q'
			else
				continue
			fi
		fi
		echo "${cmd}" | xargs tmux -S "${TMUX_SOCKET_PATH}" send-keys -t "${pane_id}"
		einfo "Closed ${pane_proc}"

	done
	IFS="${OIFS}"
}

function tmux_safe_kill_panes {
	session=$1

	current_panes=$(tmux -S "${TMUX_SOCKET_PATH}" list-panes -a -F "#{pane_id} #{pane_current_command} #{session_name}\n" | grep "${session}")

	SIFS="${IFS}"
	IFS=${__IFS}
	array=("${current_panes}")
	IFS=${SIFS}
	for (( i=0; i<${#array[@]}; i++ )) do
		safe_end_procs "${array[$i]}"
		sleep 0.8
	done
}
